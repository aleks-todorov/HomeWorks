using System;
using System.Linq;
using System.Collections.Generic;
using System.Diagnostics;
using System.Data.OleDb;
using Ionic.Zip;
using System.IO;
using Sales.Models.Excel.Models;
using Sales.Data.Excel;

namespace Sales
{
    public class ReadExcelReports
    {
        private readonly string inputPath = null;
        private readonly string outputPath = null;

        public ReadExcelReports(string inputPath, string outputPath)
        {
            this.inputPath = inputPath;
            this.outputPath = outputPath;
        }

        public ReadExcelReports Extract()
        {
            using (var zip = ZipFile.Read(this.inputPath))
            {
                foreach (var file in zip)
                {
                    file.Extract(this.outputPath, ExtractExistingFileAction.OverwriteSilently);
                }
            }

            return this;
        }

        public IEnumerable<SupermarketData> Read()
        {
            foreach (var directoryPath in Directory.GetDirectories(this.outputPath))
            {
                var directoryInfo = new DirectoryInfo(directoryPath);
                var directoryName = directoryInfo.Name;

                Debug.WriteLine("Reading: " + directoryName);

                foreach (FileInfo fileInfo in directoryInfo.GetFiles())
                {
                    var fileName = fileInfo.Name;
                    //var shopName = string.Join(" ", folderName.Split('-').TakeWhile(x => x.ToLowerInvariant() != "sales"));

                    Debug.WriteLine("  Reading: " + fileName);

                    yield return ProcessFile(fileInfo, directoryInfo);
                }
            }

            // TODO

            //ProcessFile(@"..\..\..\Temp\ExcelReports\20-Jul-2013\Zmeyovo-Sales-Report-20-Jul-2013.xls");
        }

        private SupermarketData ProcessFile(FileInfo fileInfo, DirectoryInfo directoryInfo)
        {
            string filePath = fileInfo.FullName;

            var result = new SupermarketData();
            result.Date = DateTime.Parse(directoryInfo.Name);

            var connectionString = string.Format(
                @"Provider=Microsoft.Jet.OLEDB.4.0;" +
                "Data Source={0};" +
                "Extended Properties=\"Excel 8.0; HDR=YES\";",
                filePath
            );

            var connectionStringForName = string.Format(
                @"Provider=Microsoft.Jet.OLEDB.4.0;" +
                "Data Source={0};" +
                "Extended Properties=\"Excel 8.0; HDR=No\";",
                filePath
            );

            var dbName = new OleDbConnection(connectionStringForName);

            dbName.Open();

            using (dbName)
            {
                var cmd = new OleDbCommand("SELECT * from [Sales$B2:EZ]", dbName);
                using (var reader = cmd.ExecuteReader())
                {
                    reader.Read();
                    var name = reader.GetString(0);
                    result.Name = name;
                }
            }

            var dbCon = new OleDbConnection(connectionString);

            dbCon.Open();

            using (dbCon)
            {
                var cmd = new OleDbCommand("SELECT * from [Sales$B3:EZ]", dbCon);
                using (var reader = cmd.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        if (reader["ProductID"].ToString() != string.Empty)
                        {
                            var productID = (int)((double)reader["ProductID"]);
                            var quantity = (ulong)((double)reader["Quantity"]);
                            var unitPrice = Convert.ToDecimal((double)reader["Unit Price"]);
                            var sum = Convert.ToDecimal((double)reader["Sum"]);

                            var record = new Record
                            {
                                Id = productID,
                                Quantity = quantity,
                                UnitPrice = unitPrice
                            };

                            result.Add(record);

                            //Debug.WriteLine("{0} | {1} | {2} | {3}", productID, quantity, unitPrice, sum);
                        }
                    }
                }
            }

            return result;
        }
    }
}
